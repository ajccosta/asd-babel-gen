Interface:
    Requests:

    Indications:
        channelCreated(channelId)
        neighbourUp(upNeighbours)
        neighbourDown(downNeighbours)


State:
    self // identifier of self
    membership // set with all neighbours
    subsetSize // number of neighbours to send to other
    tau          // period between anouncements

Upon Init(myself, ssSize, t, contact) do:
    self <- myself
    membership <- {}
    if contact /= ⊥ then
        membership <- membership U {contact}
    subsetSize <- ssSize
    tau <- t
    // Setup Periodic Timer SampleTimer(tau)

Upon Receive(SampleMessage, s, sample) do:
    Foreach p ∈ sample do:
        If p ∉ membership then
            membership <- membership U {p}
            Trigger neighbourUp({p})

// Upon ChannelClosed(p) do:
//     if p in membership then
//         membership <- membership \ {p}
//         Trigger neighbourDown({p})

// Upon Timer SampleTimer do:
//     If #membership >= 1 then:
//         target <- Call random(membership)
//         sample <- {self}
//         sample <- Call random(subsetSize, membership \ {target})
//         Trigger Send(SampleMSG, target, sample)

